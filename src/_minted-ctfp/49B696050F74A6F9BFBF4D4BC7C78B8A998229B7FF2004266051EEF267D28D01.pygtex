\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+c1}{// In order to make a universal transformation,}
\PYG{c+c1}{// another type needs to be introduced.}
\PYG{c+c1}{// To read more about FunctionK (\PYGZti{}\PYGZgt{}):}
\PYG{c+c1}{// typelevel.org/cats/datatypes/functionk.html}
\PYG{k}{trait} \PYG{n+nc}{\PYGZti{}\PYGZgt{}}\PYG{o}{[}\PYG{k+kt}{F}\PYG{o}{[}\PYG{k}{\PYGZus{}}\PYG{o}{]}\PYG{p}{,} \PYG{k+kt}{G}\PYG{o}{[}\PYG{k}{\PYGZus{}}\PYG{o}{]]} \PYG{o}{\PYGZob{}}
  \PYG{k}{def} \PYG{n}{apply}\PYG{o}{[}\PYG{k+kt}{B}\PYG{o}{](}\PYG{n}{fa}\PYG{k}{:} \PYG{k+kt}{F}\PYG{o}{[}\PYG{k+kt}{B}\PYG{o}{])}\PYG{k}{:} \PYG{k+kt}{G}\PYG{o}{[}\PYG{k+kt}{B}\PYG{o}{]}
\PYG{o}{\PYGZcb{}}

\PYG{c+c1}{// Kind Projector plugin provides}
\PYG{c+c1}{// a more concise syntax for type lambdas:}
\PYG{k}{def} \PYG{n}{alpha}\PYG{o}{[}\PYG{k+kt}{A}\PYG{o}{]}\PYG{k}{:} \PYG{o}{(}\PYG{k+kt}{A} \PYG{o}{=\PYGZgt{}} \PYG{k+kt}{?}\PYG{o}{)} \PYG{o}{\PYGZti{}\PYGZgt{}} \PYG{n}{F}
\end{Verbatim}
