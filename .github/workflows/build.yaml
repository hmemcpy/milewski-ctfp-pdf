name: Build

on:
  - push

jobs:
  dependencies:
    name: Build dependencies
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Set up Git repository
        uses: actions/checkout@v2

      - name: Create global variables
        id: version
        run: echo "::set-output name=version::$(git rev-parse --short HEAD)"

  build:
    name: Build documents
    needs: dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sources:
          - input: ctfp
            output:
              reader: category-theory-for-programmers.pdf
              print: category-theory-for-programmers-print.pdf
          - input: ctfp-scala
            output:
              reader: category-theory-for-programmers-scala.pdf
              print: category-theory-for-programmers-print-scala.pdf
          - input: ctfp-reason
            output:
              reader: category-theory-for-programmers-reason.pdf
              print: category-theory-for-programmers-print-reason.pdf
          - input: ctfp-ocaml
            output:
              reader: category-theory-for-programmers-ocaml.pdf
              print: category-theory-for-programmers-print-ocaml.pdf

    steps:
      - name: Set up Git repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Create necessary build file (version.tex)
        run: |
          echo -n -e "\\\newcommand{\OPTversion}{$(git rev-parse --short HEAD)}" > src/version.tex
      - name: Install Nix
        uses: cachix/install-nix-action@v16

      - name: Build ${{ matrix.sources.input }}
        run: |
          nix build .#${{ matrix.sources.input }}
          mkdir -p out
          cp -ar ./result/* out/
      - name: Upload build assets (${{ matrix.sources.output.print }})
        uses: actions/upload-artifact@v2
        with:
          name: ctfp
          path: out/*

  release:
    name: "Create Github tag/pre-release"
    runs-on: ubuntu-latest
    needs: [dependencies, build]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Github pre-release (${{ needs.dependencies.outputs.version }})
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}-${{ needs.dependencies.outputs.version }}
          release_name: Version ${{ github.run_number }} (${{ needs.dependencies.outputs.version }})
          draft: false
          prerelease: true

  assets:
    name: Upload release assets
    runs-on: ubuntu-latest
    needs: [dependencies, release]
    strategy:
      matrix:
        assets:
          - source: category-theory-for-programmers-print.pdf
            destination: category-theory-for-programmers--print
          - source: category-theory-for-programmers.pdf
            destination: category-theory-for-programmers
          - source: category-theory-for-programmers-print-scala.pdf
            destination: category-theory-for-programmers--print--scala
          - source: category-theory-for-programmers-scala.pdf
            destination: category-theory-for-programmers--reader--scala
          - source: category-theory-for-programmers-print-ocaml.pdf
            destination: category-theory-for-programmers--print--ocaml
          - source: category-theory-for-programmers-ocaml.pdf
            destination: category-theory-for-programmers--reader--ocaml
          - source: category-theory-for-programmers-print-reason.pdf
            destination: category-theory-for-programmers--print--reason
          - source: category-theory-for-programmers-reason.pdf
            destination: category-theory-for-programmers--reader--reason
    steps:
      - name: Download build assets (${{ matrix.assets.source }})
        uses: actions/download-artifact@v2
        with:
          name: ctfp
          path: ctfp

      - name: Upload release assets (${{ matrix.assets.destination }}--${{ needs.dependencies.outputs.version }}.pdf)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ctfp/${{ matrix.assets.source }}
          asset_name: ${{ matrix.assets.destination }}--${{ needs.dependencies.outputs.version }}.pdf
          asset_content_type: application/pdf
