name: Build PDFs

on:
  - push

jobs:
  dependencies:
    name: Build dependencies
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Set up Git repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Create global variables
        id: version
        run: echo "::set-output name=version::$(git rev-parse --short HEAD)"

  determine-matrix:
    name: Figure out the packages we need to build
    runs-on: ubuntu-latest
    needs: [dependencies]

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Set up Git repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install the Nix package manager
        uses: cachix/install-nix-action@v16

      - id: set-matrix
        run: |
          echo "::set-output name=matrix::$(
            nix eval --json --impure \
              --expr 'builtins.attrNames (import ./.).packages.x86_64-linux'
          )"

  build:
    name: Build documents
    needs: determine-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        packages: ${{fromJson(needs.determine-matrix.outputs.matrix)}}

    steps:
      - name: Set up Git repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install Nix
        uses: cachix/install-nix-action@v16

      - name: Build ${{ matrix.packages }}.pdf
        run: |
          nix build .#${{ matrix.packages }}
          mkdir -p out
          cp -ar ./result/* out/

      - name: Upload build assets (${{ matrix.packages }}.pdf)
        uses: actions/upload-artifact@v2
        with:
          name: ctfp
          path: out/*

  release:
    name: "Create Github tag/pre-release"
    runs-on: ubuntu-latest
    needs: [dependencies, build]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Github pre-release (${{ needs.dependencies.outputs.version }})
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}-${{ needs.dependencies.outputs.version }}
          release_name: Version ${{ github.run_number }} (${{ needs.dependencies.outputs.version }})
          draft: false
          prerelease: true

  assets:
    name: Upload release assets
    runs-on: ubuntu-latest
    needs: [determine-matrix, dependencies, release]
    strategy:
      matrix:
        packages: ${{fromJson(needs.determine-matrix.outputs.matrix)}}

    steps:
      - name: Download build assets (${{ matrix.packages }}.pdf)
        uses: actions/download-artifact@v2
        with:
          name: ctfp
          path: ctfp

      - name: Upload release assets (${{ matrix.packages }}--${{ needs.dependencies.outputs.version }}.pdf)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ctfp/${{ matrix.packages }}.pdf
          asset_name: ${{ matrix.packages }}--${{ needs.dependencies.outputs.version }}.pdf
          asset_content_type: application/pdf
